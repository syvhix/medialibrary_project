Projet Médiathèque Django — Documentation Technique

1. Étude et correctifs du code fourni :
----------------------------------------
Le code initial était constitué d’un simple squelette Python procédural avec :
- un menu console,
- des classes `livre`, `dvd`, `cd`, `jeuDePlateau` et `Emprunteur` très incomplètes,
- aucune interface utilisateur, persistance, ni logique d’emprunt réelle.

Ce code a été totalement refondu en une application Django structurée et web :
✔ Transformation des anciennes classes en modèles Django (`Book`, `DVD`, `CD`, `BoardGame`, `Member`, `Loan`).
✔ Création d’un système d’authentification (membres et bibliothécaires).
✔ Ajout d’une interface web avec templates HTML.
✔ Ajout de la gestion de la disponibilité, des emprunts, des retours et du suivi des retards.

2. Mise en place des fonctionnalités demandées :
-------------------------------------------------
- Catalogue média consultable (CD, DVD, livres, jeux de plateau)
- Tableau de bord bibliothécaire avec statistiques
- Création et gestion des membres
- Emprunt et retour de médias avec calcul des dates d’échéance
- Blocage automatique des membres en cas de retards
- Disponibilité dynamique des médias
- Authentification sécurisée (interface `login/logout`)
- Logging des actions importantes dans un fichier `.log`

3. Stratégie de tests :
------------------------
Des tests unitaires ont été créés avec `TestCase` de Django pour valider :
✔ La création correcte des objets `Book`, `CD`, `BoardGame`
✔ Les règles métier d’emprunt (3 max, pas d’emprunt si retard)
✔ Le retour des prêts et mise à jour de la disponibilité
✔ La protection des vues par rôle (`membre` vs `bibliothécaire`)
✔ L’accès aux pages via authentification

4. Base de données de test :
-----------------------------
La base de données est générée automatiquement avec `SQLite` en environnement de développement.

Un fichier de fixtures ou des commandes personnalisées peuvent être ajoutés pour peupler la base avec des données réalistes (`Book`, `Member`, etc.).